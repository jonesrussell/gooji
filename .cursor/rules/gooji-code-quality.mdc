# Gooji Code Quality Guidelines

## Go Best Practices

### Error Handling
- **ALWAYS** check errors and handle them appropriately
- Use structured error types for different error categories
- Add context to errors using `fmt.Errorf("operation failed: %w", err)`
- Log errors with appropriate levels (Debug, Info, Error, Fatal)

### Logging
- Use the project's logger from `internal/logger/`
- Include relevant context in log messages
- Use appropriate log levels:
  - Debug: Detailed debugging information
  - Info: General operational messages
  - Error: Error conditions that need attention
  - Fatal: Critical errors that require immediate shutdown

### Code Organization
- Keep functions under 30 lines when possible
- Follow single responsibility principle
- Use meaningful variable and function names
- Add comments for complex logic

## Project-Specific Patterns

### HTTP Handlers
- Use the pattern established in [internal/video/handler.go](mdc:internal/video/handler.go)
- Always check HTTP method first
- Return appropriate HTTP status codes
- Use structured logging for request handling

```go
func (h *Handler) HandleExample(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodGet {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }
    
    h.logger.Debug("Handling example request")
    
    // Handler logic here
    
    if err := h.templates["template-name"].ExecuteTemplate(w, "template.html", data); err != nil {
        h.logger.Error("Template execution error: %v", err)
        http.Error(w, "Internal server error", http.StatusInternalServerError)
        return
    }
}
```

### Template Usage
- Use the template map pattern established in [internal/video/handler.go](mdc:internal/video/handler.go)
- Pass consistent data structures to templates
- Handle template execution errors gracefully

### Configuration
- Use the configuration system from `internal/config/`
- Validate configuration on startup
- Use environment variables for sensitive data

### Resource Management
- Always close files and resources with `defer`
- Clean up temporary files on errors
- Use proper cleanup in shutdown handlers

## Testing Guidelines
- Write unit tests for all public functions
- Test error conditions and edge cases
- Use table-driven tests for multiple scenarios
- Mock external dependencies (FFmpeg, file system)

## Performance Considerations
- Use buffered I/O for file operations
- Implement streaming for large file uploads
- Add appropriate timeouts for external operations
- Monitor memory usage for video processing

## Security Patterns
- Validate all user inputs
- Sanitize file paths before use
- Use UUIDs for generated filenames
- Implement proper access controls

## Documentation
- Add package-level documentation
- Document exported types and functions
- Include usage examples for complex APIs
- Keep [TODO.md](mdc:TODO.md) updated with technical debt
description:
globs:
alwaysApply: false
---
