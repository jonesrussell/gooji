version: '3'

vars:
  BINARY_NAME: gooji
  GO_VERSION: '1.24'
  FFMPEG_VERSION: '6.1.1'

tasks:
  default:
    cmds:
      - task --list

  setup:
    desc: Set up development environment
    cmds:
      - chmod +x scripts/*.sh
      - ./scripts/setup.sh

  build:
    desc: Build the application
    cmds:
      - go build -o bin/{{.BINARY_NAME}} main.go

  run:
    desc: Run the application (production mode)
    cmds:
      - go run main.go

  dev:
    desc: Run the application in development mode with hot reload using Air
    cmds:
      - go run github.com/air-verse/air@latest

  test:
    desc: Run tests with coverage
    cmds:
      - go test -v -race -cover ./...

  test-coverage:
    desc: Generate test coverage report
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html

  lint:
    desc: Run modern Go linting tools
    cmds:
      - go vet ./...
      - go run honnef.co/go/tools/cmd/staticcheck@latest ./...
      - go run golang.org/x/vuln/cmd/govulncheck@latest ./...
      - go run github.com/golangci/golangci-lint/cmd/golangci-lint@latest run ./...

  lint-legacy:
    desc: Run legacy linters (if golangci-lint is installed)
    cmds:
      - ./scripts/lint.sh

  clean:
    desc: Clean build artifacts and temporary files
    cmds:
      - rm -rf bin/
      - rm -rf logs/*
      - rm -rf videos/*
      - rm -f coverage.out coverage.html
      - go clean -cache -testcache

  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.BINARY_NAME}}:latest .

  docker-run:
    desc: Run Docker container
    deps: [docker-build]
    cmds:
      - docker run -p 8080:8080 -v $(pwd)/videos:/app/videos {{.BINARY_NAME}}:latest

  check-deps:
    desc: Check for outdated dependencies
    cmds:
      - go list -u -m all

  update-deps:
    desc: Update dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  verify-deps:
    desc: Verify dependencies and generate go.sum
    cmds:
      - ./scripts/verify-deps.sh

  generate:
    desc: Generate code (if any)
    cmds:
      - go generate ./...

  install:
    desc: Install the application
    cmds:
      - go install .

  uninstall:
    desc: Uninstall the application
    cmds:
      - rm -f $(go env GOPATH)/bin/{{.BINARY_NAME}}

  check-ffmpeg:
    desc: Check FFmpeg installation
    cmds:
      - ./scripts/check-ffmpeg.sh

  check-env:
    desc: Check development environment
    cmds:
      - ./scripts/check-env.sh

  create-config:
    desc: Create default configuration file
    cmds:
      - ./scripts/create-config.sh

  install-tools:
    desc: Install development tools
    cmds:
      - go install github.com/air-verse/air@latest
      - go install honnef.co/go/tools/cmd/staticcheck@latest
      - go install golang.org/x/vuln/cmd/govulncheck@latest

  security-scan:
    desc: Run security vulnerability scan
    cmds:
      - go run golang.org/x/vuln/cmd/govulncheck@latest ./...

  format:
    desc: Format Go code
    cmds:
      - go fmt ./...

  tidy:
    desc: Tidy Go modules
    cmds:
      - go mod tidy
      - go mod verify 